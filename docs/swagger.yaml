openapi: 3.0.0
info:
  title: Synthetic Sensors API
  description: API for managing sensor data readings with microservice architecture
  version: 1.0.0
  contact:
    name: API Support
    email: joydeeppaul9000@gmail.com

servers:
  - url: http://localhost:8080
    description: Local development server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    LoginRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          example: admin
        password:
          type: string
          example: admin123

    LoginResponse:
      type: object
      properties:
        token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type:
          type: string
          example: Bearer

    SensorReading:
      type: object
      required:
        - id1
        - id2
        - sensor_type
        - value
      properties:
        id:
          type: integer
          readOnly: true
          example: 1
        id1:
          type: string
          pattern: '^[A-Z]$'
          example: A
        id2:
          type: integer
          minimum: 0
          maximum: 999
          example: 42
        sensor_type:
          type: string
          example: temperature
        value:
          type: number
          format: double
          example: 23.5
        timestamp:
          type: string
          format: date-time
          example: 2024-01-15T10:30:00Z

    PaginatedResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/SensorReading'
        page:
          type: integer
          example: 1
        page_size:
          type: integer
          example: 10
        total_items:
          type: integer
          example: 100
        total_pages:
          type: integer
          example: 10

    FrequencyUpdate:
      type: object
      required:
        - frequency_ms
      properties:
        frequency_ms:
          type: integer
          minimum: 100
          example: 1000

    Error:
      type: object
      properties:
        error:
          type: string
          example: Invalid request format

paths:
  /api/auth/login:
    post:
      tags:
        - Authentication
      summary: Login to get JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/readings:
    get:
      tags:
        - Sensor Readings
      summary: Get sensor readings with filters and pagination
      security:
        - bearerAuth: []
      parameters:
        - name: id1
          in: query
          schema:
            type: string
          description: Filter by ID1
        - name: id2
          in: query
          schema:
            type: integer
          description: Filter by ID2
        - name: from
          in: query
          schema:
            type: string
            format: date-time
          description: Start timestamp (RFC3339)
        - name: to
          in: query
          schema:
            type: string
            format: date-time
          description: End timestamp (RFC3339)
        - name: page
          in: query
          schema:
            type: integer
            default: 1
          description: Page number
        - name: page_size
          in: query
          schema:
            type: integer
            default: 10
            maximum: 100
          description: Items per page
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      tags:
        - Sensor Readings
      summary: Create a new sensor reading (Admin only)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SensorReading'
      responses:
        '201':
          description: Reading created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SensorReading'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - Admin access required

    delete:
      tags:
        - Sensor Readings
      summary: Delete sensor readings by filter (Admin only)
      security:
        - bearerAuth: []
      parameters:
        - name: id1
          in: query
          schema:
            type: string
          description: Filter by ID1
        - name: id2
          in: query
          schema:
            type: integer
          description: Filter by ID2
        - name: from
          in: query
          schema:
            type: string
            format: date-time
          description: Start timestamp
        - name: to
          in: query
          schema:
            type: string
            format: date-time
          description: End timestamp
      responses:
        '200':
          description: Readings deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  count:
                    type: integer
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - Admin access required

  /api/readings/{id}:
    get:
      tags:
        - Sensor Readings
      summary: Get a specific sensor reading by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Reading ID
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SensorReading'
        '404':
          description: Reading not found

    put:
      tags:
        - Sensor Readings
      summary: Update a sensor reading (Admin only)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Reading ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SensorReading'
      responses:
        '200':
          description: Reading updated successfully
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - Admin access required
        '404':
          description: Reading not found

  /config/frequency:
    get:
      tags:
        - Microservice A Configuration
      summary: Get current data generation frequency
      responses:
        '200':
          description: Current frequency
          content:
            application/json:
              schema:
                type: object
                properties:
                  frequency_ms:
                    type: integer
                    example: 1000

    put:
      tags:
        - Microservice A Configuration
      summary: Update data generation frequency
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FrequencyUpdate'
      responses:
        '200':
          description: Frequency updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  frequency_ms:
                    type: integer
                  message:
                    type: string

  /health:
    get:
      tags:
        - Health Check
      summary: Service health check
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: healthy
                  sensor_type:
                    type: string
                    example: temperature