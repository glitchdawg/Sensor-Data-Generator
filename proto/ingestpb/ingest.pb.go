// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.7
// 	protoc        v6.32.0
// source: proto/ingest.proto

package ingestpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Reading struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Value         float64                `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
	SensorType    string                 `protobuf:"bytes,2,opt,name=sensor_type,json=sensorType,proto3" json:"sensor_type,omitempty"`
	Id1           string                 `protobuf:"bytes,3,opt,name=id1,proto3" json:"id1,omitempty"`
	Id2           int32                  `protobuf:"varint,4,opt,name=id2,proto3" json:"id2,omitempty"`
	Timestamp     string                 `protobuf:"bytes,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"` // RFC3339
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Reading) Reset() {
	*x = Reading{}
	mi := &file_proto_ingest_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Reading) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Reading) ProtoMessage() {}

func (x *Reading) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ingest_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Reading.ProtoReflect.Descriptor instead.
func (*Reading) Descriptor() ([]byte, []int) {
	return file_proto_ingest_proto_rawDescGZIP(), []int{0}
}

func (x *Reading) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *Reading) GetSensorType() string {
	if x != nil {
		return x.SensorType
	}
	return ""
}

func (x *Reading) GetId1() string {
	if x != nil {
		return x.Id1
	}
	return ""
}

func (x *Reading) GetId2() int32 {
	if x != nil {
		return x.Id2
	}
	return 0
}

func (x *Reading) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

type WriteAck struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Count         uint64                 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WriteAck) Reset() {
	*x = WriteAck{}
	mi := &file_proto_ingest_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WriteAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteAck) ProtoMessage() {}

func (x *WriteAck) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ingest_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteAck.ProtoReflect.Descriptor instead.
func (*WriteAck) Descriptor() ([]byte, []int) {
	return file_proto_ingest_proto_rawDescGZIP(), []int{1}
}

func (x *WriteAck) GetCount() uint64 {
	if x != nil {
		return x.Count
	}
	return 0
}

var File_proto_ingest_proto protoreflect.FileDescriptor

const file_proto_ingest_proto_rawDesc = "" +
	"\n" +
	"\x12proto/ingest.proto\x12\x06ingest\"\x82\x01\n" +
	"\aReading\x12\x14\n" +
	"\x05value\x18\x01 \x01(\x01R\x05value\x12\x1f\n" +
	"\vsensor_type\x18\x02 \x01(\tR\n" +
	"sensorType\x12\x10\n" +
	"\x03id1\x18\x03 \x01(\tR\x03id1\x12\x10\n" +
	"\x03id2\x18\x04 \x01(\x05R\x03id2\x12\x1c\n" +
	"\ttimestamp\x18\x05 \x01(\tR\ttimestamp\" \n" +
	"\bWriteAck\x12\x14\n" +
	"\x05count\x18\x01 \x01(\x04R\x05count2=\n" +
	"\rIngestService\x12,\n" +
	"\x05Write\x12\x0f.ingest.Reading\x1a\x10.ingest.WriteAck(\x01B8Z6github.com/glitchdawg/synthetic_sensors/proto/ingestpbb\x06proto3"

var (
	file_proto_ingest_proto_rawDescOnce sync.Once
	file_proto_ingest_proto_rawDescData []byte
)

func file_proto_ingest_proto_rawDescGZIP() []byte {
	file_proto_ingest_proto_rawDescOnce.Do(func() {
		file_proto_ingest_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_ingest_proto_rawDesc), len(file_proto_ingest_proto_rawDesc)))
	})
	return file_proto_ingest_proto_rawDescData
}

var file_proto_ingest_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_proto_ingest_proto_goTypes = []any{
	(*Reading)(nil),  // 0: ingest.Reading
	(*WriteAck)(nil), // 1: ingest.WriteAck
}
var file_proto_ingest_proto_depIdxs = []int32{
	0, // 0: ingest.IngestService.Write:input_type -> ingest.Reading
	1, // 1: ingest.IngestService.Write:output_type -> ingest.WriteAck
	1, // [1:2] is the sub-list for method output_type
	0, // [0:1] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_proto_ingest_proto_init() }
func file_proto_ingest_proto_init() {
	if File_proto_ingest_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_ingest_proto_rawDesc), len(file_proto_ingest_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_ingest_proto_goTypes,
		DependencyIndexes: file_proto_ingest_proto_depIdxs,
		MessageInfos:      file_proto_ingest_proto_msgTypes,
	}.Build()
	File_proto_ingest_proto = out.File
	file_proto_ingest_proto_goTypes = nil
	file_proto_ingest_proto_depIdxs = nil
}
