// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: proto/ingest.proto

package ingestpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	IngestService_Write_FullMethodName = "/ingest.IngestService/Write"
)

// IngestServiceClient is the client API for IngestService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IngestServiceClient interface {
	Write(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[Reading, WriteAck], error)
}

type ingestServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIngestServiceClient(cc grpc.ClientConnInterface) IngestServiceClient {
	return &ingestServiceClient{cc}
}

func (c *ingestServiceClient) Write(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[Reading, WriteAck], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &IngestService_ServiceDesc.Streams[0], IngestService_Write_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Reading, WriteAck]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type IngestService_WriteClient = grpc.ClientStreamingClient[Reading, WriteAck]

// IngestServiceServer is the server API for IngestService service.
// All implementations must embed UnimplementedIngestServiceServer
// for forward compatibility.
type IngestServiceServer interface {
	Write(grpc.ClientStreamingServer[Reading, WriteAck]) error
	mustEmbedUnimplementedIngestServiceServer()
}

// UnimplementedIngestServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedIngestServiceServer struct{}

func (UnimplementedIngestServiceServer) Write(grpc.ClientStreamingServer[Reading, WriteAck]) error {
	return status.Errorf(codes.Unimplemented, "method Write not implemented")
}
func (UnimplementedIngestServiceServer) mustEmbedUnimplementedIngestServiceServer() {}
func (UnimplementedIngestServiceServer) testEmbeddedByValue()                       {}

// UnsafeIngestServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IngestServiceServer will
// result in compilation errors.
type UnsafeIngestServiceServer interface {
	mustEmbedUnimplementedIngestServiceServer()
}

func RegisterIngestServiceServer(s grpc.ServiceRegistrar, srv IngestServiceServer) {
	// If the following call pancis, it indicates UnimplementedIngestServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&IngestService_ServiceDesc, srv)
}

func _IngestService_Write_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(IngestServiceServer).Write(&grpc.GenericServerStream[Reading, WriteAck]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type IngestService_WriteServer = grpc.ClientStreamingServer[Reading, WriteAck]

// IngestService_ServiceDesc is the grpc.ServiceDesc for IngestService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IngestService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ingest.IngestService",
	HandlerType: (*IngestServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Write",
			Handler:       _IngestService_Write_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/ingest.proto",
}
